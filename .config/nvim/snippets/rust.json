{
    "fn": {
        "prefix": "fn",
        "description": "Function definition",
        "body": [
            "fn ${i:function_name}({$2})${3} {",
            "${0}",
            "};"
        ]
    },
    "pfn": {
        "prefix": "pfn",
        "description": "Public function definition",
        "body": [
            "pub fn ${i:function_name}({$2})${3} {",
            "${0}",
            "};"
        ]
    },
    "afn": {
        "prefix": "afn",
        "description": "Async function definition",
        "body": [
            "async fn ${i:function_name}({$2})${3} {",
            "${0}",
            "};"
        ]
    },
    "pafn": {
        "prefix": "pafn",
        "description": "Public async function definition",
        "body": [
            "pub async fn ${i:function_name}({$2})${3} {",
            "${0}",
            "};"
        ]
    },
    "new": {
        "prefix": "new",
        "description": "Constructor function",
        "body": [
            "pub fn new(${2}) -> ${1:Self} {",
            "$1 { ${3} }",
            "};"
        ]
    },
    "let": {
        "prefix": "let",
        "description": "let variable declaration with explicit type annotation",
        "body": [
            "let ${1}: ${2} = ${3};"
        ]
    },
    "letm": {
        "prefix": "letm",
        "description": "let mut variable declaration with explicit type annotation",
        "body": [
            "let mut ${1}: ${2} = ${3};"
        ]
    },
    "pln": {
        "prefix": "pln",
        "description": "println!",
        "body": [
            "println!(\"${1}\");"
        ]
    },
    "fmt": {
        "prefix": "fmt",
        "description": "format!",
        "body": [
            "format!(\"${1}{${2}}\", ${3});"
        ]
    },
    "as": {
        "prefix": "as",
        "description": "assert!",
        "body": [
            "assert!(${1:predicate});"
        ]
    },
    "ase": {
        "prefix": "ase",
        "description": "assert_eq!",
        "body": [
            "assert_eq!(${1:expected}, ${2:actual});"
        ]
    },
    "test": {
        "prefix": "test",
        "description": "Unit test function",
        "body": [
            "#[test]",
            "fn ${1:function_name}_test() {",
            "${0}",
            "}"
        ]
    },
    "testm": {
        "prefix": "testm",
        "description": "Test module",
        "body": [
            "#[cfg(test)]",
            "mod tests {",
            "use super::${1:*};",
            "test${0}",
            "}"
        ]
    },
    "allow": {
        "prefix": "allow",
        "description": "allow lint attribute",
        "body": [
            "#[allow(${1:unused_variables})]"
        ]
    },
    "cfg": {
        "prefix": "cfg",
        "description": "cfg lint attribute",
        "body": [
            "#[cfg(${1:target_os = "linux"})]"
        ]
    },
    "feat": {
        "prefix": "feat",
        "description": "feature attribute",
        "body": [
            "#![feature(${1:plugin})]"
        ]
    },
    "der": {
        "prefix": "der",
        "description": "#[derive(..)]",
        "body": [
            "#[derive(${1:Debug})]"
        ]
    },
    "attr": {
        "prefix": "attr",
        "description": "#[..]",
        "body": [
            "#[${1:inline}]"
        ]
    },
    "opt": {
        "prefix": "opt",
        "description": "Option<T>",
        "body": [
            "Option<${1:i32}>"
        ]
    },
    "res": {
        "prefix": "res",
        "description": "Result<T>",
        "body": [
            "Result<${1:&str}, ${2:()}>"
        ]
    },
    "if": {
        "prefix": "if",
        "description": "if",
        "body": [
            "if ${1} {",
            "${0:${VISUAL}}",
            "}"
        ]
    },
    "ife": {
        "prefix": "ife",
        "description": "if / else",
        "body": [
            "if ${1} {",
            "${2:${VISUAL}}",
            "} else {",
            "${0}",
            "}"
        ]
    },
    "ifl": {
        "prefix": "ifl",
        "description": "if let (...)",
        "body": [
            "if let ${1:Some($2)} = $3 {",
            "${0:${VISUAL}}",
            "}"
        ]
    },
    "el": {
        "prefix": "el",
        "description": "else",
        "body": [
            "else {",
            "${0:${VISUAL}}",
            "}"
        ]
    },
    "mat": {
        "prefix": "mat",
        "description": "match patttern",
        "body": [
            "match ${1} {",
            "${2} => ${3}",
            "}"
        ]
    },
    "case": {
        "prefix": "case",
        "description": "case clause of match patttern",
        "body": [
            "${1:_} => ${2:expression}"
        ]
    },
    "for": {
        "prefix": "for",
        "description": "for ... in ... loop",
        "body": [
            "for ${1:i} in ${2} {",
            "${0}",
            "}"
        ]
    },
    "st": {
        "prefix": "st",
        "description": "Struct definition",
        "body": [
            "struct ${1} {",
            "${0}",
            "}"
        ]
    },
    "stn": {
        "prefix": "stn",
        "description": "Struct with new constructor",
        "body": [
            "pub struct ${1} {",
            "${0}",
            "}",
            "",
            "impl$2 $1$2 {",
            "pub fn new(${4}) -> Self {",
            "$1 { ${5} }",
            "}",
            "}"
        ]
    },
    "imp": {
        "prefix": "imp",
        "description": "Struct/Trait implementation",
        "body": [
            "impl ${1:Type/Trait}${2: for $3} {",
            "${0}",
            "}"
        ]
    },
    "tp": {
        "prefix": "tp",
        "description": "Type alias",
        "body": [
            "type ${1:NewName} = $2;"
        ]
    },
    "en": {
        "prefix": "en",
        "description": "Enum definition",
        "body": [
            "enum ${1:Name} {",
            "${2}",
            "}"
        ]
    },
    "pen": {
        "prefix": "pen",
        "description": "Public enum definition",
        "body": [
            "pub enum ${1:Name} {",
            "${2}",
            "}"
        ]
    },
    "trait": {
        "prefix": "trait",
        "description": "Trait definition",
        "body": [
            "trait ${1:Name} {",
            "${0}",
            "}"
        ]
    }
}
